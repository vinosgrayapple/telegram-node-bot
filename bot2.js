const TelegramBot = require('node-telegram-bot-api');
const request = require('request');
const fs = require('fs');

const usersArray = JSON.parse(fs.readFileSync('./db.json')).json;
const idTXT = fs.readFileSync('./id.json', 'utf-8');
const whiteList = JSON.parse(idTXT);
const password = 'parabellum';
const token = '388795002:AAE1UCy5COY_cOFeLSo0dFFJIlkU7mgkr4w';

const bot = new TelegramBot(token, { polling: true });

// Get password
bot.onText(/^\/pass (parabellum)/, (msg, match) => {
    const chatId = msg.chat.id;
    if (whiteList.indexOf(chatId) !== -1) {
     bot.sendMessage(chatId, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    return;
    }
    const resp = match[1];
    if (resp === password) {
        const dataToWrite = idTXT.slice(0, idTXT.length - 1) + ',' + chatId + ']';
        fs.writeFile('./id.json', dataToWrite, () => bot.sendMessage(chatId, "–í—ã –≤ —Å–∏—Å—Ç–µ–º–µ"));
    } else {
        bot.sendMessage(chatId, "–ù–µ –ø–∏—à–∏ —Å—é–¥–∞ –±–æ–ª—å—à–µ!!!");
        return;
    }
});

// Search for lastName
bot.onText(/^([^\/].+)/, (msg, match) => {
    const chatId = msg.chat.id;
    if (whiteList.indexOf(chatId) == -1) return;

    console.log("chatId", chatId, "  ", (new Date()).toString().split(' ')[4]);
 
    const resp = match[1].replace(/\s/g, '');

    filteredUser = usersArray.filter(user => user.lastName.toUpperCase().includes(resp.toUpperCase()));
    // console.log(filteredUser.length);
	if (!filteredUser.length) {bot.sendMessage(chatId,"_–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ_!", { "parse_mode": "Markdown" })}
    filteredUser.map(
        (user) => {
            const msgForSend = `_ ${user.lastName.toUpperCase()} ${user.firstName.toUpperCase()} _ :  
								 üì± *${user.mobileNumber}*   (‚òéÔ∏è *${user.innerNumber}*)`;
            bot.sendMessage(chatId, msgForSend, { "parse_mode": "Markdown" });
        }

    );

});

// Get all User
bot.onText(/\/inall/, (msg, match) => {
    const chatId = msg.chat.id;
    if (whiteList.indexOf(chatId) == -1) return;

    msgForSend = usersArray.reduce((concat, user) => concat + `_ ${user.lastName.toUpperCase()} ${user.firstName.toUpperCase()} _ : ‚òéÔ∏è *${user.innerNumber}*  üì± *${user.mobileNumber}* \n\n`,
        ``);
    bot.sendMessage(chatId, msgForSend, { "parse_mode": "Markdown" });
});

// Get HELP
bot.onText(/\/help/, (msg, match) => {

    const chatId = msg.chat.id;
    if (whiteList.indexOf(chatId) == -1) return;

    msgForSend = `
	/help    - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞
	/inall   - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–∏–º —Å–ø–∏—Å–∫–æ–º
	/in XXX  - –ì–¥–µ XXX —Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ –µ–µ —á–∞—Å—Ç—å

	`;
    bot.sendMessage(chatId, msgForSend, { "parse_mode": "Markdown" });
});

bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  if (whiteList.indexOf(chatId) == -1) {
  	bot.sendMessage(chatId, '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!');
  }
});

console.log('Bot starting....')
